{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\olcay\\\\OneDrive\\\\Masa\\xFCst\\xFC\\\\React\\\\class-notes\\\\DE-08-lifeCycle\\\\src\\\\components\\\\LifeCyclesMethods.jsx\";\n//?==================================================================\n//?                         LIFECYCLE METHODS\n//?          https://reactjs.org/docs/react-component.html\n//?\n//?==================================================================\n\n//* Lifecycle yöntemleri, DOM'daki süreleri boyunca componentler üzerinde çalışmak için kullanılan, React'te yerleşik özel yöntemlerdir.\n//* Örneğin, bileşen bağlandığında, oluşturduğunda, güncellendiğinde veya bağlantısını kestiğinde.\n\n//* Component in oluşturulması (constructor)\n//* DOM ağacına ekleme. (componentDidMount)\n//* Component in işlenmesi  (render)\n//* (Optional) Componentin update edilmesi (componentDidUpdate)\n//* componentin ölümü (DOM ağacından kaldırılıyor)\n\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass LifeCycleMethods extends React.Component {\n  //! 1-) componentin oluşturulmasında çağrılır\n  constructor(props) {\n    console.log(\"Constructor is running\");\n    super(props);\n    this.handleInc = () => {\n      this.setState({\n        count: this.state.count + 1\n      });\n    };\n    this.state = {\n      count: 0\n    };\n  }\n  //????????????\n\n  //! 3-) component  monte edildiğinde çağrılır\n  //! (ilk renderdan hemen sonra).\n  //!  lifecycle döngüsünde yalnızca bir kez çağrılır\n  componentDidMount() {\n    console.log(\"Component kuruldu\");\n  }\n\n  //! 4-) bileşen güncellenir ve yeniden oluşturulur hemen sonrasında çağrılır.\n  //! It receives the prevState and prevProps as parameters\n  //!ayrıca yeni değiştirilen duruma veya props lara  bir kez erişebilir\n  componentDidUpdate() {\n    console.log(\"Component update edildi\");\n  }\n\n  //! 5-) bileşen DOM'dan kaldırılmadan önce çağrılır\n  componentWillUnmount() {\n    console.log(\"Component öldü\");\n  }\n\n  //! 2-) her oluşturmada çağrılır (Bileşeni DOM'a çizme)\n  render() {\n    console.log(\"Component Rendered\");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container text-center mt-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-danger\",\n        children: \"LIFECYCLE METHODS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"COUNT=\", this.state.count]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-info\",\n        onClick: this.handleInc,\n        children: \"INC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default LifeCycleMethods;","map":{"version":3,"names":["React","LifeCycleMethods","Component","constructor","props","console","log","handleInc","setState","count","state","componentDidMount","componentDidUpdate","componentWillUnmount","render"],"sources":["C:/Users/olcay/OneDrive/Masaüstü/React/class-notes/DE-08-lifeCycle/src/components/LifeCyclesMethods.jsx"],"sourcesContent":["//?==================================================================\r\n//?                         LIFECYCLE METHODS\r\n//?          https://reactjs.org/docs/react-component.html\r\n//?\r\n//?==================================================================\r\n\r\n//* Lifecycle yöntemleri, DOM'daki süreleri boyunca componentler üzerinde çalışmak için kullanılan, React'te yerleşik özel yöntemlerdir.\r\n//* Örneğin, bileşen bağlandığında, oluşturduğunda, güncellendiğinde veya bağlantısını kestiğinde.\r\n\r\n//* Component in oluşturulması (constructor)\r\n//* DOM ağacına ekleme. (componentDidMount)\r\n//* Component in işlenmesi  (render)\r\n//* (Optional) Componentin update edilmesi (componentDidUpdate)\r\n//* componentin ölümü (DOM ağacından kaldırılıyor)\r\n\r\nimport React from \"react\";\r\n\r\nclass LifeCycleMethods extends React.Component {\r\n    //! 1-) componentin oluşturulmasında çağrılır\r\n    constructor(props) {\r\n        console.log(\"Constructor is running\");\r\n        super(props);\r\n        this.state = {\r\n            count: 0,\r\n        };\r\n    }\r\n    //????????????\r\n    handleInc = () => {\r\n        this.setState({\r\n            count: this.state.count + 1,\r\n        });\r\n    };\r\n\r\n    //! 3-) component  monte edildiğinde çağrılır\r\n    //! (ilk renderdan hemen sonra).\r\n    //!  lifecycle döngüsünde yalnızca bir kez çağrılır\r\n    componentDidMount() {\r\n        console.log(\"Component kuruldu\");\r\n    }\r\n\r\n    //! 4-) bileşen güncellenir ve yeniden oluşturulur hemen sonrasında çağrılır.\r\n    //! It receives the prevState and prevProps as parameters\r\n    //!ayrıca yeni değiştirilen duruma veya props lara  bir kez erişebilir\r\n    componentDidUpdate() {\r\n        console.log(\"Component update edildi\");\r\n    }\r\n\r\n    //! 5-) bileşen DOM'dan kaldırılmadan önce çağrılır\r\n    componentWillUnmount() {\r\n        console.log(\"Component öldü\");\r\n    }\r\n\r\n    //! 2-) her oluşturmada çağrılır (Bileşeni DOM'a çizme)\r\n    render() {\r\n        console.log(\"Component Rendered\");\r\n        return (\r\n            <div className=\"container text-center mt-4\">\r\n                <h1 className=\"text-danger\">LIFECYCLE METHODS</h1>\r\n                <h3>COUNT={this.state.count}</h3>\r\n                <button className=\"btn btn-info\" onClick={this.handleInc}>\r\n                    INC\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default LifeCycleMethods;\r\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAAC;AAE1B,MAAMC,gBAAgB,SAASD,KAAK,CAACE,SAAS,CAAC;EAC3C;EACAC,WAAW,CAACC,KAAK,EAAE;IACfC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IACrC,KAAK,CAACF,KAAK,CAAC;IAAC,KAMjBG,SAAS,GAAG,MAAM;MACd,IAAI,CAACC,QAAQ,CAAC;QACVC,KAAK,EAAE,IAAI,CAACC,KAAK,CAACD,KAAK,GAAG;MAC9B,CAAC,CAAC;IACN,CAAC;IATG,IAAI,CAACC,KAAK,GAAG;MACTD,KAAK,EAAE;IACX,CAAC;EACL;EACA;;EAOA;EACA;EACA;EACAE,iBAAiB,GAAG;IAChBN,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;EACpC;;EAEA;EACA;EACA;EACAM,kBAAkB,GAAG;IACjBP,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;EAC1C;;EAEA;EACAO,oBAAoB,GAAG;IACnBR,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;EACjC;;EAEA;EACAQ,MAAM,GAAG;IACLT,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACjC,oBACI;MAAK,SAAS,EAAC,4BAA4B;MAAA,wBACvC;QAAI,SAAS,EAAC,aAAa;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAuB,eAClD;QAAA,qBAAW,IAAI,CAACI,KAAK,CAACD,KAAK;MAAA;QAAA;QAAA;QAAA;MAAA,QAAM,eACjC;QAAQ,SAAS,EAAC,cAAc;QAAC,OAAO,EAAE,IAAI,CAACF,SAAU;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAEhD;IAAA;MAAA;MAAA;MAAA;IAAA,QACP;EAEd;AACJ;AACA,eAAeN,gBAAgB"},"metadata":{},"sourceType":"module"}